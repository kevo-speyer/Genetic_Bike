import numpy as np
from numpy import linalg as LA

Gravity_Const=9.8
def force(bike):
	"""
	Get bike properties and compute the accelaration of each object and set back to acc properties of bike. Take care the function don't have any history for the location and calling it may change value!
	"""
	bike.bike_acc[0,0]=0
	bike.bike_acc[0,0]=bike.bike_acc[0,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[1]-bike.bike_pos[0])-bike.bike_l0[0,1])*(bike.bike_pos[1,0]-bike.bike_pos[0,0])/(LA.norm(bike.bike_pos[0]-bike.bike_pos[1]))
	bike.bike_acc[0,0]=bike.bike_acc[0,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[2]-bike.bike_pos[0])-bike.bike_l0[0,2])*(bike.bike_pos[2,0]-bike.bike_pos[0,0])/(LA.norm(bike.bike_pos[0]-bike.bike_pos[2]))
	bike.bike_acc[0,0]=bike.bike_acc[0,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[3]-bike.bike_pos[0])-bike.bike_l0[0,3])*(bike.bike_pos[3,0]-bike.bike_pos[0,0])/(LA.norm(bike.bike_pos[0]-bike.bike_pos[3]))
	bike.bike_acc[0,0]=bike.bike_acc[0,0]/bike.bike_mass[0]
	bike.bike_acc[0,1]=0
	bike.bike_acc[0,1]=bike.bike_acc[0,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[1]-bike.bike_pos[0])-bike.bike_l0[0,1])*(bike.bike_pos[1,1]-bike.bike_pos[0,1])/(LA.norm(bike.bike_pos[0]-bike.bike_pos[1]))
	bike.bike_acc[0,1]=bike.bike_acc[0,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[2]-bike.bike_pos[0])-bike.bike_l0[0,2])*(bike.bike_pos[2,1]-bike.bike_pos[0,1])/(LA.norm(bike.bike_pos[0]-bike.bike_pos[2]))
	bike.bike_acc[0,1]=bike.bike_acc[0,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[3]-bike.bike_pos[0])-bike.bike_l0[0,3])*(bike.bike_pos[3,1]-bike.bike_pos[0,1])/(LA.norm(bike.bike_pos[0]-bike.bike_pos[3]))
	bike.bike_acc[0,1]=bike.bike_acc[0,1]-bike.bike_mass[0]*Gravity_Const
	bike.bike_acc[0,1]=bike.bike_acc[0,1]/bike.bike_mass[0]

	bike.bike_acc[1,0]=0
	bike.bike_acc[1,0]=bike.bike_acc[1,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[0]-bike.bike_pos[1])-bike.bike_l0[1,0])*(bike.bike_pos[0,0]-bike.bike_pos[1,0])/(LA.norm(bike.bike_pos[1]-bike.bike_pos[0]))
	bike.bike_acc[1,0]=bike.bike_acc[1,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[2]-bike.bike_pos[1])-bike.bike_l0[1,2])*(bike.bike_pos[2,0]-bike.bike_pos[1,0])/(LA.norm(bike.bike_pos[1]-bike.bike_pos[2]))
	bike.bike_acc[1,0]=bike.bike_acc[1,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[3]-bike.bike_pos[1])-bike.bike_l0[1,3])*(bike.bike_pos[3,0]-bike.bike_pos[1,0])/(LA.norm(bike.bike_pos[1]-bike.bike_pos[3]))
	bike.bike_acc[1,0]=bike.bike_acc[1,0]/bike.bike_mass[1]
	bike.bike_acc[1,1]=0
	bike.bike_acc[1,1]=bike.bike_acc[1,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[0]-bike.bike_pos[1])-bike.bike_l0[1,0])*(bike.bike_pos[0,1]-bike.bike_pos[1,1])/(LA.norm(bike.bike_pos[1]-bike.bike_pos[0]))
	bike.bike_acc[1,1]=bike.bike_acc[1,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[2]-bike.bike_pos[1])-bike.bike_l0[1,2])*(bike.bike_pos[2,1]-bike.bike_pos[1,1])/(LA.norm(bike.bike_pos[1]-bike.bike_pos[2]))
	bike.bike_acc[1,1]=bike.bike_acc[1,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[3]-bike.bike_pos[1])-bike.bike_l0[1,3])*(bike.bike_pos[3,1]-bike.bike_pos[1,1])/(LA.norm(bike.bike_pos[1]-bike.bike_pos[3]))
	bike.bike_acc[1,1]=bike.bike_acc[1,1]-bike.bike_mass[1]*Gravity_Const	
	bike.bike_acc[1,1]=bike.bike_acc[1,1]/bike.bike_mass[1]

	bike.bike_acc[2,0]=0
	bike.bike_acc[2,0]=bike.bike_acc[2,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[0]-bike.bike_pos[2])-bike.bike_l0[2,0])*(bike.bike_pos[0,0]-bike.bike_pos[2,0])/(LA.norm(bike.bike_pos[2]-bike.bike_pos[0]))
	bike.bike_acc[2,0]=bike.bike_acc[2,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[1]-bike.bike_pos[2])-bike.bike_l0[2,1])*(bike.bike_pos[1,0]-bike.bike_pos[2,0])/(LA.norm(bike.bike_pos[2]-bike.bike_pos[1]))
	bike.bike_acc[2,0]=bike.bike_acc[2,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[3]-bike.bike_pos[2])-bike.bike_l0[2,3])*(bike.bike_pos[3,0]-bike.bike_pos[2,0])/(LA.norm(bike.bike_pos[2]-bike.bike_pos[3]))
	bike.bike_acc[2,0]=bike.bike_acc[2,0]/bike.bike_mass[2]
	bike.bike_acc[2,1]=0
	bike.bike_acc[2,1]=bike.bike_acc[2,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[0]-bike.bike_pos[2])-bike.bike_l0[2,0])*(bike.bike_pos[0,1]-bike.bike_pos[2,1])/(LA.norm(bike.bike_pos[2]-bike.bike_pos[0]))
	bike.bike_acc[2,1]=bike.bike_acc[2,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[1]-bike.bike_pos[2])-bike.bike_l0[2,1])*(bike.bike_pos[1,1]-bike.bike_pos[2,1])/(LA.norm(bike.bike_pos[2]-bike.bike_pos[1]))
	bike.bike_acc[2,1]=bike.bike_acc[2,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[3]-bike.bike_pos[2])-bike.bike_l0[2,3])*(bike.bike_pos[3,1]-bike.bike_pos[2,1])/(LA.norm(bike.bike_pos[2]-bike.bike_pos[3]))
	bike.bike_acc[2,1]=bike.bike_acc[2,1]-bike.bike_mass[2]*Gravity_Const
	bike.bike_acc[2,1]=bike.bike_acc[2,1]/bike.bike_mass[2]

	bike.bike_acc[3,0]=0
	bike.bike_acc[3,0]=bike.bike_acc[3,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[0]-bike.bike_pos[3])-bike.bike_l0[3,0])*(bike.bike_pos[0,0]-bike.bike_pos[3,0])/(LA.norm(bike.bike_pos[3]-bike.bike_pos[0]))
	bike.bike_acc[3,0]=bike.bike_acc[3,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[1]-bike.bike_pos[3])-bike.bike_l0[3,1])*(bike.bike_pos[1,0]-bike.bike_pos[3,0])/(LA.norm(bike.bike_pos[3]-bike.bike_pos[1]))
	bike.bike_acc[3,0]=bike.bike_acc[3,0]+bike.k_sp*abs(LA.norm(bike.bike_pos[2]-bike.bike_pos[3])-bike.bike_l0[3,2])*(bike.bike_pos[2,0]-bike.bike_pos[3,0])/(LA.norm(bike.bike_pos[3]-bike.bike_pos[2]))
	bike.bike_acc[3,0]=bike.bike_acc[3,0]/bike.bike_mass[3]
	bike.bike_acc[3,1]=0
	bike.bike_acc[3,1]=bike.bike_acc[3,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[0]-bike.bike_pos[3])-bike.bike_l0[3,0])*(bike.bike_pos[0,1]-bike.bike_pos[3,1])/(LA.norm(bike.bike_pos[3]-bike.bike_pos[0]))
	bike.bike_acc[3,1]=bike.bike_acc[3,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[1]-bike.bike_pos[3])-bike.bike_l0[3,1])*(bike.bike_pos[1,1]-bike.bike_pos[3,1])/(LA.norm(bike.bike_pos[3]-bike.bike_pos[1]))
	bike.bike_acc[3,1]=bike.bike_acc[3,1]+bike.k_sp*abs(LA.norm(bike.bike_pos[2]-bike.bike_pos[3])-bike.bike_l0[3,2])*(bike.bike_pos[2,1]-bike.bike_pos[3,1])/(LA.norm(bike.bike_pos[3]-bike.bike_pos[2]))
	bike.bike_acc[3,1]=bike.bike_acc[3,1]-bike.bike_mass[3]*Gravity_Const
	bike.bike_acc[3,1]=bike.bike_acc[3,1]/bike.bike_mass[3]
